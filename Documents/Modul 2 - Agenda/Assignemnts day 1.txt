Agenda

1. Hvad er en søgemaskine?

Indeksering
Søgning
Datamodellen
2. Opgave 1 løses.

4. Code walk-through

Arkitektur
Indexer - crawler
console search
5. Opgave 2, 3, ... løses. Hvis I har andre opgaver, som I er nysgerrige på, så er I mere end velkommen til at kaste jer over dem. Del gerne jeres ideer med mig inden I går i krig. Måske jeg kan hjælpe jer i den rigtige retning eller forhindre I forsøger at løse for stor en opgave.

 

Opgaver

Opgave 1
Få søgemaskinen til at køre på jeres computer. I skal

Koden er sat op til at køre via .net 9.0. Sørg for at det er installeret på jeres computer.
Søgemaskinen anvender sqlite som database. Installer en sqlite browser - se https://sqlitebrowser.org/dl/Links to an external site..
Sørge for at builde alle projekter og eventuelt opdatere nuget packages.
Lægge nogle dokumenter i folderen til indexering. I kan selv lave nogle eller bruge nogle af dem i filen seData.zip.
Opdatere Shared.Path så stien til databasen peger på databasen.
Opdatere Indexer.Config så stien til hvor filerne der skal indekeres ligger er korrekt.
Kør indexer
Inspicér databasen, check at alle dokumenter er indexeret og lav nogle stikprøver mht hvilke ord der er indexeret.
Kør searchConsole. Afprøv med forespørgsler på først 1 ord, så 2 ord og tilsidst flere end 2 ord. Check både hit og ikke hit.
Opgave 2
Som det er nu, vil indekseren afslutte med at udskrive alle ord til konsollen. Output kan fx. se således ud:

DONE! used 986905.577
Indexed 50850 documents
Number of different words: 292796
The first 10 is:
<Message, 1>
<ID, 2>
<6184043, 3>
<1075857585289, 4>
<JavaMail, 5>
<evans, 6>
<thyme, 7>
<Date, 8>
<Tue, 9>
<28, 10>

Heraf fremgår det at processen med at indeksere de cirka 50.000 dokumenter tog knap 1000 sekunder (godt 15 min) og at der blev fundet knap 300.000 forskellige ord.

Lav det om så indekseringen afsluttes med, at der informeres om hvor mange ord forekomster der er indekseret og der spørges til hvor mange ord man vil se. Derefter vises det ønskede antal med deres hyppighed, men de ord der forekommer hyppigst, skal vises først. Så sidste det af output kunne være:

<Message, 1> - 48342
<ID, 2> - 47234
<mail, 12> - 47124
<the, 45> - 46847
... 

Opgave 3
I versionen er søgningen case sensitiv. Sørg for brugeren selv kan slå dette fra eller til. Det kan gøres ved, at ConsoleSearch ikke bare kan modtage queries, men også kommandoer, så brugeren kan indtaste "/casesensitive=on" hvis søgningerne skal være case sensitive (som de er nu), og indtaste "/casesensitive=off", hvis søgningerne ikke skal være case sensitive. Alternativt - eller til at starte med - kan I gøre det ved at oprette en Config klasse med en attribut med navn CaseSensitive af type boolean.

Opgave 4
Når man søger, får man info om tidspunkt for indeksering af dokumenter. Sørg for at brugeren vælger dette til eller fra. Det kan gøres ved brugeren kan skrive "/timestamp=on", hvis de skal med i resultatlisten eller "/timestamp=off", hvis det ikke skal med. Alternativt - eller til at starte med - kan I gøre det ved at have en attribut med navn ViewTimeStamps af type boolean i config.cs i Shared projektet.

Opgave 5
Som det er nu, vises de 10 "bedste" dokumenter som resultat af en søgning. Sæt dette til 20. Derefter, sørg for at brugeren kan vælge dette, fx ved kommandoen "/results=15" for at få de 15 bedste, eller "/results=all" for at få vist alle. Alternativt - eller til at starte med - kan I gøre det ved, at have en attribut i Config klassen, som reræsenterer denne mulige begrænsning. En simpel type for dette kunne være int? - altså en int, som kan være null. Her kunne "reglen" så være, at hvis den er null, skal man se alle resultater, ellers er dens værdi grænsen for hvor mange resultater der skal vises.

Opgave 6 - svær - måske i projektet?
Udvid søgemaskinen med mulighed for mønstersøgning. Forestil jer at domænet er politi og at de i forbindelse med en forbrydelse har en del af en nummerplade, fx. de ved den starter med BJ og ender på 7. De vil nu gerne finde alle steder hvor dette nummer kan være anført. Med såkaldte wildcard eller regulære udtryk kunne et mønster være følgende "BJ????7". Alle ord på 7 tegn, startende med BJ og slutter med 7 vil matche dette mønster. I et mønster kan bruges enten '?' som står for netop et vilkårligt tegn, mens '*' står for et vilkårligt antal (også ingen) tegn. Til at søge efter ovennævnte nummerplade, kunne man bruge et lidt simplere mønster, nemlig "BJ*7". Men det vil matche ord som bestemt ikke angiver en nummerplade. Hvorfor det?
Resultatet af en mønstersøgning skal være alle de dokumenter, som indeholder et ord, som matcher søgeordet. Derudover skal resultatet vise de ord fra dokumentet som der matches på. Derved kunne output komme til at se således ud:

enter search terms - q for quit
BJ????7
Pattern Search
1: /Users/peter/documents/2019/obs/05-12.txt -- contains 3 matching terms:
BJ12347, BJERGE7, BJ73857

2: /Users/John/documents/2017/contacts/12_17.txt -- contains 1 matching term:
BJ43567
I den første version af mønstersøgning er det en god idé at lave det, så der kun kan søges på et mønster og ikke i kombination med almindelige søgeord.